<%= form_with model: @schedule_form, url: url, data: { turbo: false } do |f| %>
  <%= render "/shared/error_messages", object: f.object %>

  <div class="space-y-3">
    <div>
      <%= f.label :title, class: "label" do %>
        <span class="label-text">
          <%= Schedule.human_attribute_name(:title) %><span class="text-error">*</span>
        </span>
      <% end %>
      <%= f.text_field :title, autofocus: true, placeholder: t("schedules.form.placeholder.title"), class: "input input-bordered w-full", autocomplete: "off" %>
    </div>

    <div data-controller="input-datetime">
      <div class="flex flex-col sm:flex-row sm:gap-2">
        <div class="w-full">
          <%= f.label :start_date, Schedule.human_attribute_name(:start_date), class: "label-text" %>
          <%= f.datetime_field :start_date, class: "input input-bordered w-full", autocomplete: "off",
          data: { input_datetime_target: "startDate", action: "input-datetime#copyStartToEnd" } %>
        </div>
        <div class="w-full">
          <%= f.label :end_date, Schedule.human_attribute_name(:end_date), class: "label-text" %>
          <%= f.datetime_field :end_date, class: "input input-bordered w-full", autocomplete: "off",
          data: { input_datetime_target: "endDate" } %>
        </div>
      </div>
    </div>

    <div>
      <%= f.label :name, Spot.human_attribute_name(:name), class: "label-text" %>
      <%= f.text_field :name, id: "spotName", class: "input input-bordered w-full", autocomplete: "off" %>
    </div>

    <div>
      <%= f.label :telephone, Spot.human_attribute_name(:telephone), class: "label-text" %>
      <%= f.text_field :telephone, id: "phoneNumber", class: "input input-bordered w-full", autocomplete: "off" %>
    </div>

    <div>
      <%= f.label :address, Spot.human_attribute_name(:address), class: "label-text" %>
      <%= f.text_field :address, id: "address", class: "input input-bordered w-full", autocomplete: "off" %>
    </div>

    <div>
      <%= f.label :budged, Schedule.human_attribute_name(:budged), class: "label-text" %>
      <div class="flex items-center">
        <%= f.number_field :budged, class: "input input-bordered w-full", autocomplete: "off" %>
        <span class="ml-2"><%= t("helpers.currency_unit") %></span>
      </div>
    </div>

    <div>
      <%= f.label :memo, Schedule.human_attribute_name(:memo), class: "label-text" %>
      <%= f.text_area :memo, placeholder: t("schedules.form.placeholder.memo"), rows: "3", class: "textarea textarea-bordered w-full", autocomplete: "off" %>
    </div>

    <div>
      <%= f.label :schedule_image, Schedule.human_attribute_name(:schedule_image), class: "label-text" %>
      <%= f.file_field :schedule_image, accept: "image/*", class: "file-input file-input-bordered w-full" %>
      <%= f.hidden_field :schedule_image_cache %>
    </div>

    <div>
      <%= f.label :schedule_icon_id, ScheduleIcon.human_attribute_name(:name), class: "label-text" %>
      <div class="flex flex-wrap gap-x-3 gap-y-2">
        <% ScheduleIcon.all.each do |icon| %>
          <div class="flex items-center gap-1">
            <%= f.radio_button :schedule_icon_id, icon.id, id: "schedule_icon_#{icon.id}", class: "radio radio-primary" %>
            <%= f.label "schedule_icon_#{icon.id}", for: "schedule_icon_#{icon.id}", class: "cursor-pointer" do %>
              <% if icon.name == "none" %>
                <span class="text-base"><%= t(".schedule_icon.none_icon") %></span>
              <% else %>
                <i class="fa-solid <%= icon.name %> text-xl"></i>
              <% end %>
            <% end %>
          </div>
        <% end %>
      </div>
    </div>
    <%= f.button nil, type: 'button', onclick: 'submit();', data: { turbo: false }, class: "btn btn-primary w-full" %>
  </div>
<% end %>

<script>
function initMap() {
  // 場所名と住所のフォームにオートコンプリートをつける処理
  // 場所名,電話番号, 住所
  const inputSpotName = document.getElementById("spotName");
  const inputPhoneNumber = document.getElementById("phoneNumber");
  const inputAddress = document.getElementById("address");

  function setAutocomplete(inputElement){
    const options = {
      componentRestrictions: { country: 'JP' }
    };
    const autocomplete = new google.maps.places.Autocomplete(inputElement, options);

    autocomplete.addListener("place_changed", function() {
      const place = autocomplete.getPlace();
      // 場所名、電話番号、住所を更新する(nilかundefinedの場合は空文字)
      inputSpotName.value = place.name ?? "";
      inputPhoneNumber.value = place.formatted_phone_number ?? "";
      inputAddress.value = place.formatted_address ?? "";
    });
  }

  setAutocomplete(inputSpotName);
  setAutocomplete(inputAddress);
}
</script>
<script async
  src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_API_KEY'] %>&loading=async&libraries=places&callback=initMap">
</script>